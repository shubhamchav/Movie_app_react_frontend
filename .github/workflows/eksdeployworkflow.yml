name: React Frontend CI/CD Pipeline
 
# This workflow handles the CI/CD process for the React frontend
# It builds, tests, and deploys the React application to S3
 
# Trigger on push to main branch or pull requests
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main
 
# Environment variables
env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # Change to your preferred region
  S3_BUCKET: shubham-react-movie-app # Change to your bucket name
  SKIP_PREFLIGHT_CHECK: true # Skip Create React App dependency checks
 
# Permissions for OIDC authentication
permissions:
  id-token: write
  contents: read
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
 
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4
 
      # Setup Node.js - using Node.js 16 for better compatibility with older React apps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16' # Using Node.js 16 for better compatibility
          cache: 'npm'
          cache-dependency-path: './package-lock.json'
 
      # Install dependencies with legacy-peer-deps to handle @material-ui/core with React 18
      - name: Install Dependencies
        run: npm install --legacy-peer-deps
 
      # Create or update .env file with SKIP_PREFLIGHT_CHECK
      - name: Setup Environment
        run: |
          echo "SKIP_PREFLIGHT_CHECK=true" >> .env
          cat .env
 
      # Run unit tests and generate code coverage
      - name: Run Tests and Generate Coverage
        continue-on-error: true  # Allow this step to fail as test files are not present
        run: |
          echo "Running tests..."
          npm test -- --watchAll=false
 
      # Upload coverage reports as artifacts
      - name: Upload Coverage Reports
        if: always()  # Run even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
 
      # Build the React app
      - name: Build
        run: npm run build
 
      # # Run SonarQube analysis
      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
 
      # Configure AWS credentials using OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }}
          role-session-name: shubham_movie_app_role
          aws-region: ${{ secrets.AWS_REGION }}
 
      # Sync build folder to S3
      - name: Deploy to S3
        run: |
          aws s3 sync --delete ./build/ s3://${{ env.S3_BUCKET }}
